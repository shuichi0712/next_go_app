// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"next_go_blog/ent/studytime"
	"next_go_blog/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StudyTime is the model entity for the StudyTime schema.
type StudyTime struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Hour holds the value of the "hour" field.
	Hour int `json:"hour,omitempty"`
	// Minite holds the value of the "minite" field.
	Minite int `json:"minite,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudyTimeQuery when eager-loading is set.
	Edges        StudyTimeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StudyTimeEdges holds the relations/edges for other nodes in the graph.
type StudyTimeEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudyTimeEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StudyTime) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case studytime.FieldID, studytime.FieldUserID, studytime.FieldHour, studytime.FieldMinite:
			values[i] = new(sql.NullInt64)
		case studytime.FieldTitle:
			values[i] = new(sql.NullString)
		case studytime.FieldCreatedAt, studytime.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StudyTime fields.
func (st *StudyTime) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case studytime.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case studytime.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				st.UserID = int(value.Int64)
			}
		case studytime.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				st.Title = value.String
			}
		case studytime.FieldHour:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hour", values[i])
			} else if value.Valid {
				st.Hour = int(value.Int64)
			}
		case studytime.FieldMinite:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minite", values[i])
			} else if value.Valid {
				st.Minite = int(value.Int64)
			}
		case studytime.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case studytime.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StudyTime.
// This includes values selected through modifiers, order, etc.
func (st *StudyTime) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the StudyTime entity.
func (st *StudyTime) QueryUsers() *UserQuery {
	return NewStudyTimeClient(st.config).QueryUsers(st)
}

// Update returns a builder for updating this StudyTime.
// Note that you need to call StudyTime.Unwrap() before calling this method if this StudyTime
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *StudyTime) Update() *StudyTimeUpdateOne {
	return NewStudyTimeClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the StudyTime entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *StudyTime) Unwrap() *StudyTime {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: StudyTime is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *StudyTime) String() string {
	var builder strings.Builder
	builder.WriteString("StudyTime(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", st.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(st.Title)
	builder.WriteString(", ")
	builder.WriteString("hour=")
	builder.WriteString(fmt.Sprintf("%v", st.Hour))
	builder.WriteString(", ")
	builder.WriteString("minite=")
	builder.WriteString(fmt.Sprintf("%v", st.Minite))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StudyTimes is a parsable slice of StudyTime.
type StudyTimes []*StudyTime
