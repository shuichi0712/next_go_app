// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"next_go_blog/ent/predicate"
	"next_go_blog/ent/studytime"
	"next_go_blog/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudyTimeUpdate is the builder for updating StudyTime entities.
type StudyTimeUpdate struct {
	config
	hooks    []Hook
	mutation *StudyTimeMutation
}

// Where appends a list predicates to the StudyTimeUpdate builder.
func (stu *StudyTimeUpdate) Where(ps ...predicate.StudyTime) *StudyTimeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetUserID sets the "user_id" field.
func (stu *StudyTimeUpdate) SetUserID(i int) *StudyTimeUpdate {
	stu.mutation.SetUserID(i)
	return stu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (stu *StudyTimeUpdate) SetNillableUserID(i *int) *StudyTimeUpdate {
	if i != nil {
		stu.SetUserID(*i)
	}
	return stu
}

// SetTitle sets the "title" field.
func (stu *StudyTimeUpdate) SetTitle(s string) *StudyTimeUpdate {
	stu.mutation.SetTitle(s)
	return stu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (stu *StudyTimeUpdate) SetNillableTitle(s *string) *StudyTimeUpdate {
	if s != nil {
		stu.SetTitle(*s)
	}
	return stu
}

// SetHour sets the "hour" field.
func (stu *StudyTimeUpdate) SetHour(i int) *StudyTimeUpdate {
	stu.mutation.ResetHour()
	stu.mutation.SetHour(i)
	return stu
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (stu *StudyTimeUpdate) SetNillableHour(i *int) *StudyTimeUpdate {
	if i != nil {
		stu.SetHour(*i)
	}
	return stu
}

// AddHour adds i to the "hour" field.
func (stu *StudyTimeUpdate) AddHour(i int) *StudyTimeUpdate {
	stu.mutation.AddHour(i)
	return stu
}

// SetMinite sets the "minite" field.
func (stu *StudyTimeUpdate) SetMinite(i int) *StudyTimeUpdate {
	stu.mutation.ResetMinite()
	stu.mutation.SetMinite(i)
	return stu
}

// SetNillableMinite sets the "minite" field if the given value is not nil.
func (stu *StudyTimeUpdate) SetNillableMinite(i *int) *StudyTimeUpdate {
	if i != nil {
		stu.SetMinite(*i)
	}
	return stu
}

// AddMinite adds i to the "minite" field.
func (stu *StudyTimeUpdate) AddMinite(i int) *StudyTimeUpdate {
	stu.mutation.AddMinite(i)
	return stu
}

// SetCreatedAt sets the "created_at" field.
func (stu *StudyTimeUpdate) SetCreatedAt(t time.Time) *StudyTimeUpdate {
	stu.mutation.SetCreatedAt(t)
	return stu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stu *StudyTimeUpdate) SetNillableCreatedAt(t *time.Time) *StudyTimeUpdate {
	if t != nil {
		stu.SetCreatedAt(*t)
	}
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *StudyTimeUpdate) SetUpdatedAt(t time.Time) *StudyTimeUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (stu *StudyTimeUpdate) SetUsersID(id int) *StudyTimeUpdate {
	stu.mutation.SetUsersID(id)
	return stu
}

// SetUsers sets the "users" edge to the User entity.
func (stu *StudyTimeUpdate) SetUsers(u *User) *StudyTimeUpdate {
	return stu.SetUsersID(u.ID)
}

// Mutation returns the StudyTimeMutation object of the builder.
func (stu *StudyTimeUpdate) Mutation() *StudyTimeMutation {
	return stu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (stu *StudyTimeUpdate) ClearUsers() *StudyTimeUpdate {
	stu.mutation.ClearUsers()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *StudyTimeUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *StudyTimeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *StudyTimeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *StudyTimeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *StudyTimeUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := studytime.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *StudyTimeUpdate) check() error {
	if v, ok := stu.mutation.UserID(); ok {
		if err := studytime.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "StudyTime.user_id": %w`, err)}
		}
	}
	if v, ok := stu.mutation.Title(); ok {
		if err := studytime.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "StudyTime.title": %w`, err)}
		}
	}
	if _, ok := stu.mutation.UsersID(); stu.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudyTime.users"`)
	}
	return nil
}

func (stu *StudyTimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(studytime.Table, studytime.Columns, sqlgraph.NewFieldSpec(studytime.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Title(); ok {
		_spec.SetField(studytime.FieldTitle, field.TypeString, value)
	}
	if value, ok := stu.mutation.Hour(); ok {
		_spec.SetField(studytime.FieldHour, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedHour(); ok {
		_spec.AddField(studytime.FieldHour, field.TypeInt, value)
	}
	if value, ok := stu.mutation.Minite(); ok {
		_spec.SetField(studytime.FieldMinite, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedMinite(); ok {
		_spec.AddField(studytime.FieldMinite, field.TypeInt, value)
	}
	if value, ok := stu.mutation.CreatedAt(); ok {
		_spec.SetField(studytime.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.SetField(studytime.FieldUpdatedAt, field.TypeTime, value)
	}
	if stu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studytime.UsersTable,
			Columns: []string{studytime.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studytime.UsersTable,
			Columns: []string{studytime.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studytime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// StudyTimeUpdateOne is the builder for updating a single StudyTime entity.
type StudyTimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudyTimeMutation
}

// SetUserID sets the "user_id" field.
func (stuo *StudyTimeUpdateOne) SetUserID(i int) *StudyTimeUpdateOne {
	stuo.mutation.SetUserID(i)
	return stuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (stuo *StudyTimeUpdateOne) SetNillableUserID(i *int) *StudyTimeUpdateOne {
	if i != nil {
		stuo.SetUserID(*i)
	}
	return stuo
}

// SetTitle sets the "title" field.
func (stuo *StudyTimeUpdateOne) SetTitle(s string) *StudyTimeUpdateOne {
	stuo.mutation.SetTitle(s)
	return stuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (stuo *StudyTimeUpdateOne) SetNillableTitle(s *string) *StudyTimeUpdateOne {
	if s != nil {
		stuo.SetTitle(*s)
	}
	return stuo
}

// SetHour sets the "hour" field.
func (stuo *StudyTimeUpdateOne) SetHour(i int) *StudyTimeUpdateOne {
	stuo.mutation.ResetHour()
	stuo.mutation.SetHour(i)
	return stuo
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (stuo *StudyTimeUpdateOne) SetNillableHour(i *int) *StudyTimeUpdateOne {
	if i != nil {
		stuo.SetHour(*i)
	}
	return stuo
}

// AddHour adds i to the "hour" field.
func (stuo *StudyTimeUpdateOne) AddHour(i int) *StudyTimeUpdateOne {
	stuo.mutation.AddHour(i)
	return stuo
}

// SetMinite sets the "minite" field.
func (stuo *StudyTimeUpdateOne) SetMinite(i int) *StudyTimeUpdateOne {
	stuo.mutation.ResetMinite()
	stuo.mutation.SetMinite(i)
	return stuo
}

// SetNillableMinite sets the "minite" field if the given value is not nil.
func (stuo *StudyTimeUpdateOne) SetNillableMinite(i *int) *StudyTimeUpdateOne {
	if i != nil {
		stuo.SetMinite(*i)
	}
	return stuo
}

// AddMinite adds i to the "minite" field.
func (stuo *StudyTimeUpdateOne) AddMinite(i int) *StudyTimeUpdateOne {
	stuo.mutation.AddMinite(i)
	return stuo
}

// SetCreatedAt sets the "created_at" field.
func (stuo *StudyTimeUpdateOne) SetCreatedAt(t time.Time) *StudyTimeUpdateOne {
	stuo.mutation.SetCreatedAt(t)
	return stuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stuo *StudyTimeUpdateOne) SetNillableCreatedAt(t *time.Time) *StudyTimeUpdateOne {
	if t != nil {
		stuo.SetCreatedAt(*t)
	}
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *StudyTimeUpdateOne) SetUpdatedAt(t time.Time) *StudyTimeUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (stuo *StudyTimeUpdateOne) SetUsersID(id int) *StudyTimeUpdateOne {
	stuo.mutation.SetUsersID(id)
	return stuo
}

// SetUsers sets the "users" edge to the User entity.
func (stuo *StudyTimeUpdateOne) SetUsers(u *User) *StudyTimeUpdateOne {
	return stuo.SetUsersID(u.ID)
}

// Mutation returns the StudyTimeMutation object of the builder.
func (stuo *StudyTimeUpdateOne) Mutation() *StudyTimeMutation {
	return stuo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (stuo *StudyTimeUpdateOne) ClearUsers() *StudyTimeUpdateOne {
	stuo.mutation.ClearUsers()
	return stuo
}

// Where appends a list predicates to the StudyTimeUpdate builder.
func (stuo *StudyTimeUpdateOne) Where(ps ...predicate.StudyTime) *StudyTimeUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *StudyTimeUpdateOne) Select(field string, fields ...string) *StudyTimeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated StudyTime entity.
func (stuo *StudyTimeUpdateOne) Save(ctx context.Context) (*StudyTime, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *StudyTimeUpdateOne) SaveX(ctx context.Context) *StudyTime {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *StudyTimeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *StudyTimeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *StudyTimeUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := studytime.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *StudyTimeUpdateOne) check() error {
	if v, ok := stuo.mutation.UserID(); ok {
		if err := studytime.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "StudyTime.user_id": %w`, err)}
		}
	}
	if v, ok := stuo.mutation.Title(); ok {
		if err := studytime.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "StudyTime.title": %w`, err)}
		}
	}
	if _, ok := stuo.mutation.UsersID(); stuo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudyTime.users"`)
	}
	return nil
}

func (stuo *StudyTimeUpdateOne) sqlSave(ctx context.Context) (_node *StudyTime, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(studytime.Table, studytime.Columns, sqlgraph.NewFieldSpec(studytime.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StudyTime.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studytime.FieldID)
		for _, f := range fields {
			if !studytime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studytime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Title(); ok {
		_spec.SetField(studytime.FieldTitle, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Hour(); ok {
		_spec.SetField(studytime.FieldHour, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedHour(); ok {
		_spec.AddField(studytime.FieldHour, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.Minite(); ok {
		_spec.SetField(studytime.FieldMinite, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedMinite(); ok {
		_spec.AddField(studytime.FieldMinite, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.CreatedAt(); ok {
		_spec.SetField(studytime.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.SetField(studytime.FieldUpdatedAt, field.TypeTime, value)
	}
	if stuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studytime.UsersTable,
			Columns: []string{studytime.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studytime.UsersTable,
			Columns: []string{studytime.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StudyTime{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studytime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
