// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"next_go_blog/ent/studytime"
	"next_go_blog/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudyTimeCreate is the builder for creating a StudyTime entity.
type StudyTimeCreate struct {
	config
	mutation *StudyTimeMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (stc *StudyTimeCreate) SetUserID(i int) *StudyTimeCreate {
	stc.mutation.SetUserID(i)
	return stc
}

// SetTitle sets the "title" field.
func (stc *StudyTimeCreate) SetTitle(s string) *StudyTimeCreate {
	stc.mutation.SetTitle(s)
	return stc
}

// SetHour sets the "hour" field.
func (stc *StudyTimeCreate) SetHour(i int) *StudyTimeCreate {
	stc.mutation.SetHour(i)
	return stc
}

// SetMinite sets the "minite" field.
func (stc *StudyTimeCreate) SetMinite(i int) *StudyTimeCreate {
	stc.mutation.SetMinite(i)
	return stc
}

// SetCreatedAt sets the "created_at" field.
func (stc *StudyTimeCreate) SetCreatedAt(t time.Time) *StudyTimeCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *StudyTimeCreate) SetNillableCreatedAt(t *time.Time) *StudyTimeCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *StudyTimeCreate) SetUpdatedAt(t time.Time) *StudyTimeCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *StudyTimeCreate) SetNillableUpdatedAt(t *time.Time) *StudyTimeCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (stc *StudyTimeCreate) SetUsersID(id int) *StudyTimeCreate {
	stc.mutation.SetUsersID(id)
	return stc
}

// SetUsers sets the "users" edge to the User entity.
func (stc *StudyTimeCreate) SetUsers(u *User) *StudyTimeCreate {
	return stc.SetUsersID(u.ID)
}

// Mutation returns the StudyTimeMutation object of the builder.
func (stc *StudyTimeCreate) Mutation() *StudyTimeMutation {
	return stc.mutation
}

// Save creates the StudyTime in the database.
func (stc *StudyTimeCreate) Save(ctx context.Context) (*StudyTime, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *StudyTimeCreate) SaveX(ctx context.Context) *StudyTime {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *StudyTimeCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *StudyTimeCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *StudyTimeCreate) defaults() {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := studytime.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		v := studytime.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *StudyTimeCreate) check() error {
	if _, ok := stc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "StudyTime.user_id"`)}
	}
	if v, ok := stc.mutation.UserID(); ok {
		if err := studytime.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "StudyTime.user_id": %w`, err)}
		}
	}
	if _, ok := stc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "StudyTime.title"`)}
	}
	if v, ok := stc.mutation.Title(); ok {
		if err := studytime.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "StudyTime.title": %w`, err)}
		}
	}
	if _, ok := stc.mutation.Hour(); !ok {
		return &ValidationError{Name: "hour", err: errors.New(`ent: missing required field "StudyTime.hour"`)}
	}
	if _, ok := stc.mutation.Minite(); !ok {
		return &ValidationError{Name: "minite", err: errors.New(`ent: missing required field "StudyTime.minite"`)}
	}
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StudyTime.created_at"`)}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StudyTime.updated_at"`)}
	}
	if _, ok := stc.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "StudyTime.users"`)}
	}
	return nil
}

func (stc *StudyTimeCreate) sqlSave(ctx context.Context) (*StudyTime, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *StudyTimeCreate) createSpec() (*StudyTime, *sqlgraph.CreateSpec) {
	var (
		_node = &StudyTime{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(studytime.Table, sqlgraph.NewFieldSpec(studytime.FieldID, field.TypeInt))
	)
	if value, ok := stc.mutation.Title(); ok {
		_spec.SetField(studytime.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := stc.mutation.Hour(); ok {
		_spec.SetField(studytime.FieldHour, field.TypeInt, value)
		_node.Hour = value
	}
	if value, ok := stc.mutation.Minite(); ok {
		_spec.SetField(studytime.FieldMinite, field.TypeInt, value)
		_node.Minite = value
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.SetField(studytime.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.SetField(studytime.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := stc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   studytime.UsersTable,
			Columns: []string{studytime.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudyTimeCreateBulk is the builder for creating many StudyTime entities in bulk.
type StudyTimeCreateBulk struct {
	config
	err      error
	builders []*StudyTimeCreate
}

// Save creates the StudyTime entities in the database.
func (stcb *StudyTimeCreateBulk) Save(ctx context.Context) ([]*StudyTime, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*StudyTime, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudyTimeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *StudyTimeCreateBulk) SaveX(ctx context.Context) []*StudyTime {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *StudyTimeCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *StudyTimeCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
